package cn.chitucao.test;

import cn.hutool.core.util.StrUtil;
import org.junit.Test;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

/**
 * @author DennyFly
 * @since 2020/3/11 14:57
 */
public class StringTest {
    public static void main(String[] args) {
        String s = "hello";
//        s = "world"; //内存地址已经修改 原来地址上的值还是不变的，只是失去了引用等待垃圾回收
        String s2 = "hello"; //从常量池中找到并引用
        String s4 = new String("hello"); //new产生一个新的对象 不会从常量池中引用
        String s6 = "hel" + "lo";
        String s7 = new String("hel") + new String("lo");
        System.out.println(s == s2); //引用相等     Java把字符串常量存入字符串常量池，优先从常量池查引用
        System.out.println(s2 == s4); //引用不相等       new的对象不会从常量池查引用
        System.out.println(s2.equals(s4)); //值相等    分析equals方法源码,比较的是hash值
        System.out.println(s2 == s6); //引用相等    使用相常量相加 也是从常量池中找到引用
        System.out.println(s2 == s7); //引用不相等


        String a = "a" + "b" + 1;
        String b = "ab1";
        System.out.println(a == b); //引用相等，常亮是从常量池中找引用
    }


    @Test
    public void testUpperFirst() {
        String str = "哈哈哈";
        System.out.println(StrUtil.upperFirst(str));
    }

    @Test
    public void testReplace() {
        String text = "abc,sfdfs,上发顺丰,是否，懂法守法，发多少";
//         text = null;
        String end = text.replace("，", ",");
        System.out.println(end);
    }


    @Test
    public void testLowCase(){
        String text = "SCAN_TIME";
        String result = StrUtil.toCamelCase(text.toLowerCase());
        System.out.println(result);
    }

    @Test
    public void testWorker() {
        // 20210312之前
        String text = "57,194,218,1557,1896,2483,2544,2661,2741,2743,3018,3214,3271,3299,3378,3452,3473,3475,3622,3721,3906,3934,4003,4004,4267,4270,4587,4721,4781,5532,5667,5708,6421,6852," +
                "7529,8109,8325,8375,8820,8862,10503,10848,14246,16450,1022474,1023400,1025561,1045771,1047640,1048151,1053484,1053806,1057092,1064202,"+

                // 上海管区
                "11,34,35,36,40,71,73,74,75,96,259,328,436,439,440,464,487,530,572,709,710,800,804,829,847,913,941,951,978,1080,1100,1105,1190,1200,1324,1331,1454,1471,1615,1619,1691,1760," +
                "836,1845,1960,1961,1962,1963,1965,1968,1992,2088,2104,2118,2119,2120,2182,2183,2184,2190,2207,2221,2262,2412,2504,2521,2540,2546,2563,2611,2660,2681,2745,2902,2904,2906," +
                "2962,2990,3057,3113,3118,3135,3160,3163,3186,3199,3246,3270,3271,3272,3273,3288,3291,3329,3330,3338,3378,3401,3402,3405,3407,3466,3467,3481,3498,3521,3552,3553,3561,3564," +
                "3566,3574,3577,3660,3735,3736,3737,3818,3828,3834,3853,3877,3878,3881,3882,3943,3944,3946,3947,3978,4001,4022,4083,4134,4135,4159,4236,4409,4681,4714,4792,4897,4933,4934," +
                "4935,4936,4937,4938,5015,5539,5583,5784,5794,6121,6316,6399,6420,6421,6422,6517,6518,6868,6990,7026,7101,7278,7292,7334,7385,7386,7387,7388,7389,7390,7391,7392,7413," +
                "7484,7541,7586,7633,7790,7799,7830,7852,7853,7869,7998,8000,8040,8076,8100,8123,8203,8255,8363,8441,8538,8683,8811,9087,9207,9256,10484,10907,10908,10909,10910,10941,11265," +
                "11441,11641,11661,11921,12201,12246,12344,12741,12742,12762,12763,13421,13641,14881,14882,14883,14884,14885,15281,15902,16222,16542,1021832,1022384,1022505,1022772,1022895," +
                "1023070,1023071,1023430,1023431,1023810,1024030,1024280,1024860,1025240,1025420,1025662,1025725,1025800,1025846,1025900,1028213,1032322,1037976,1041596,1041597,1041723,1041735," +
                "1042874,1043775,1044562,1045533,1046611,1047266,1048396,1048500,1048793,1049251,1049850,1050351,1050415,1050649,1051093,1051094,1051313,1051344,1051657,1051672,1051741,1051746," +
                "1051819,1051821,1052131,1053484,1055089,1055133,1055279,1055307,1055458,1056428,1056967,1057665,1057739,1057769,1058682,1059536,1059774,1060580,1060586,1060587,1060653,1060654," +
                "1060794,1060801,1060828,1061246,1061488,1061618,1061620,1061630,1061700,1061716,1061717,1061807,1061870,1061906,1061938,1061992,1061993,1062042,1062094,1062273,1062345,1062347," +
                "1062383,1062400,1062616,1062658,1062659,1062749,1062750,1063275,1063297,1063298,1063569,1063657,1063771,1063941,1064052,1064179,1064225,1064392,1064400,1064421,1064424,1064425," +
                "1064449,1064472,1064488,1064594,1064647,1064752,1064898,1064899,1064901,1065246,1065252,1065294,1065295,1065298,1065310,1065317,1065338,1065344,1065375,1065447,1065448,"+

                // 20210318
                "573,2515,2801,3032,3875,3985,4271,7942,7944,"+

                // 20210319
                "347,3494,3733,3761,4272,6303,7536,"+

                // 20210326
                "202,1198,2572,3761,8782,1061152,"+

                // 20210402
                "7526,1049864," +

                // 20210407
                "266,1368,1064142," +
                // 20210409
                "3397,1065662";


        List<Long> longList = Arrays.stream(text.split(",")).map(Long::valueOf).sorted().collect(Collectors.toList());

       // 重复
        longList = longList.stream().distinct().collect(Collectors.toList());
        System.out.println(longList.size());
        System.out.println(longList.stream().distinct().count());

        // join
        List<String> stringList = longList.stream().map(Object::toString).collect(Collectors.toList());
        String textResult = String.join(",", stringList);

        System.out.println(textResult);

    }

    @Test
    public void testDateLength(){
        System.out.println(String.valueOf(System.currentTimeMillis()).length());
    }

    @Test
    public void testWrap(){

        String text = "张三";
        System.out.println(StrUtil.wrap(text,"%","%"));

    }
}

